Solutions to Easy and SQL(Basic) Problems

REVISING THE SELECT QUERY 1
Query all columns for all American cities in the CITY table with populations larger than 100000. The CountryCode for America is USA.

-- Solution
SELECT * FROM CITY WHERE POPULATION > 100000 AND COUNTRYCODE ='USA';

REVISING THE SELECT QUERY 2
Query the NAME field for all American cities in the CITY table with populations larger than 120000. The CountryCode for America is USA.

--Solution
SELECT NAME
FROM CITY
WHERE COUNTRYCODE = "USA" AND POPULATION > 120000;

SELECT ALL
Query all columns (attributes) for every row in the CITY table.

--Solution
SELECT * FROM CITY;


SELECT BY ID
Query all columns for a city in CITY with the ID 1661.

--Solution
select * from CITY where ID=1661;

JAPANESE CITIES' ATTRIBUTES
Query all attributes of every Japanese city in the CITY table. The COUNTRYCODE for Japan is JPN.
--Solution
select * from CITY where COUNTRYCODE = 'JPN';

JAPANESE CITIES' NAMES
Query the names of all the Japanese cities in the CITY table. The COUNTRYCODE for Japan is JPN.
--Solution
select Name from CITY where COUNTRYCODE ='JPN';

WEATHER OBSERVATION STATION 1
Query a list of CITY and STATE from the STATION table.
--Solution
select City,State from Station;

WEATHER OBSERVATION STATION 3
Query a list of CITY names from STATION for cities that have an even ID number. Print the results in any order, but exclude duplicates from the answer.
--Solution
select distinct City from Station where right(ID,1)in (2,4,6,8,0)

WEATHER OBSERVATION STATION 4
Find the difference between the total number of CITY entries in the table and the number of distinct CITY entries in the table.
For example, if there are three records in the table with CITY values 'New York', 'New York', 'Bengalaru', there are 2 different city names: 'New York' and 'Bengalaru'.
--Solution
select count(CITY)- count(distinct CITY) from STATION;

WEATHER OBSERVATION STATION 5
Query the two cities in STATION with the shortest and longest CITY names, as well as their respective lengths (i.e.: number of characters in the name). If there is more than one smallest or largest city, choose the one that comes first when ordered alphabetically.
--Solution
select CITY,LENGTH(CITY) from STATION order by Length(CITY) asc, CITY limit 1;
select CITY,LENGTH(CITY) from STATION order by Length(CITY) desc, CITY limit 1;

WEATHER OBSERVATION STATION 6
Query the list of CITY names starting with vowels (i.e., a, e, i, o, or u) from STATION. Your result cannot contain duplicates.
--Solution
SELECT distinct CITY from STATION where (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%');

WEATHER OBSERVATION STATION 7
Query the list of CITY names ending with vowels (a, e, i, o, u) from STATION. Your result cannot contain duplicates.
--Solution
select distinct CITY from STATION where right(City,1) in('a','e','i','o','u');

WEATHER OBSERVATION STATION 8
Query the list of CITY names from STATION which have vowels (i.e., a, e, i, o, and u) as both their first and last characters. Your result cannot contain duplicates
--Solution
SELECT DISTINCT CITY FROM STATION WHERE (CITY LIKE 'A%' OR CITY LIKE 'E%' OR CITY LIKE 'I%' OR CITY LIKE 'O%' OR CITY LIKE 'U%') AND (CITY LIKE '%a' OR CITY LIKE '%e' OR CITY LIKE '%i' OR CITY LIKE '%o' OR CITY LIKE '%u');

WEATHER OBSERVATION STATION 9
Query the list of CITY names from STATION that do not start with vowels. Your result cannot contain duplicates.
--Solution
select distinct City from Station where left(City,1) not in('a','e','i','o','u');

WEATHER OBSERVATION STATION 10
Query the list of CITY names from STATION that do not end with vowels. Your result cannot contain duplicates.
--Solution
SELECT DISTINCT CITY 
FROM STATION  
WHERE (CITY NOT LIKE '%a' AND
    CITY  NOT LIKE '%e' AND
    CITY NOT LIKE '%i' AND 
    CITY NOT LIKE '%o' AND 
    CITY NOT LIKE '%u');

WEATHER OBSERVATION STATION 11
Query the list of CITY names from STATION that either do not start with vowels or do not end with vowels. Your result cannot contain duplicates.
--Solution
select distinct city from STATION where left(CITY,1) not in ('a','e','i','o','u') or right(CITY,1) not in ('a','e','i','o','u');


WEATHER OBSERVATION STATION 12
Query the list of CITY names from STATION that do not start with vowels and do not end with vowels. Your result cannot contain duplicates.
--Solution
SELECT DISTINCT CITY FROM STATION WHERE LOWER(SUBSTR(CITY,1,1)) NOT IN ('a','e','i','o','u') AND LOWER(SUBSTR(CITY,LENGTH(CITY),1)) NOT IN ('a','e','i','o','u');

HIGHER THAN 75 MARKS
Query the Name of any student in STUDENTS who scored higher than  Marks. Order your output by the last three characters of each name. If two or more students both have names ending in the same last three characters (i.e.: Bobby, Robby, etc.), secondary sort them by ascending ID.
--Solution
select NAME from STUDENTS  where MARKS > 75  order by right(NAME,3),ID;

EMPLOYEE NAMES
Write a query that prints a list of employee names (i.e.: the name attribute) from the Employee table in alphabetical order.
--Solution
SELECT NAME FROM EMPLOYEE ORDER BY NAME ;

EMPLOYEE SALARIES
Write a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than  per month who have been employees for less than  months. Sort your result by ascending employee_id.
--Solution
SELECT name from Employee where salary > 2000 AND months < 10;

TYPE OF TRIANGLE
Write a query identifying the type of each record in the TRIANGLES table using its three side lengths. Output one of the following statements for each record in the table:

Equilateral: It's a triangle with  sides of equal length.
Isosceles: It's a triangle with  sides of equal length.
Scalene: It's a triangle with  sides of differing lengths.
Not A Triangle: The given values of A, B, and C don't form a triangle.

--Solution
SELECT CASE
WHEN A + B <= C OR A + C <= B OR B + C <= A THEN 'Not A Triangle'
WHEN A = B AND B = C THEN 'Equilateral'
WHEN A = B OR B = C OR A = C THEN 'Isosceles'
ELSE 'Scalene'
END
FROM TRIANGLES;


REVISING AGGREGATIONS- THE COUNT FUNCTION
Query a count of the number of cities in CITY having a Population larger than 100,000
--Solution
SELECT COUNT(POPULATION)
FROM CITY
WHERE POPULATION > 100000;

REVISING AGGREGATIONS- THE SUM FUNCTION
Query the total population of all cities in CITY where District is California.
--Solution
select sum(Population) from City where District='California';

REVISING AGGREGATIONS- AVERAGES
Query the average population of all cities in CITY where District is California.
--Solution
SELECT AVG(POPULATION) FROM CITY where DISTRICT = 'California';



